syntax="proto3";

package api;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "gogoproto/gogo.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "github.com/coreos/etcd/raft/raftpb/raft.proto";

option go_package = "github.com/orishu/deeb/api;controller";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		version: "1.0";
	};
	schemes: HTTPS;
};

// Enable custom Marshal method.
option (gogoproto.marshaler_all) = true;
// Enable custom Unmarshal method.
option (gogoproto.unmarshaler_all) = true;
// Enable custom Size method (Required by Marshal and Unmarshal).
option (gogoproto.sizer_all) = true;
// Enable registration with golang/protobuf for the grpc-gateway.
option (gogoproto.goproto_registration) = true;
// Enable generation of XXX_MessageName methods for grpc-go/status.
option (gogoproto.messagename_all) = true;

service ControlService {
	rpc Status(google.protobuf.Empty) returns (StatusResponse) {
		option (google.api.http) = {
			get: "/api/v1/status"
		};
	}

	rpc AddPeer(AddPeerRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			post: "/api/v1/peers"
			body: "*"
		};
	}
}

service Raft {
	rpc Message(raftpb.Message) returns (google.protobuf.Empty);
	rpc GetID(google.protobuf.Empty) returns (GetIDResponse) {
		option (google.api.http) = {
			get: "/api/v1/raft/id"
		};
	}
}

enum StatusCode {
	OK = 0;
	ERROR = 1;
}

message StatusResponse {
	StatusCode code = 1;
}

message AddPeerRequest {
	uint64 id = 1;
	string addr = 2;
	string port = 3;
};

message GetIDResponse {
    	uint64 id = 1;
}

message WriteQuery {
	uint64 nodeID = 1;
	uint64 queryID = 2;
	string sql = 3;
}
