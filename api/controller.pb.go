// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: controller.proto

package controller

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "github.com/mwitkow/go-proto-validators"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StatusCode int32

const (
	StatusCode_OK    StatusCode = 0
	StatusCode_ERROR StatusCode = 1
)

var StatusCode_name = map[int32]string{
	0: "OK",
	1: "ERROR",
}

var StatusCode_value = map[string]int32{
	"OK":    0,
	"ERROR": 1,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}

func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{0}
}

type StatusResponse struct {
	Code                 StatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=api.StatusCode" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{0}
}
func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(m, src)
}
func (m *StatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetCode() StatusCode {
	if m != nil {
		return m.Code
	}
	return StatusCode_OK
}

func (*StatusResponse) XXX_MessageName() string {
	return "api.StatusResponse"
}
func init() {
	proto.RegisterEnum("api.StatusCode", StatusCode_name, StatusCode_value)
	golang_proto.RegisterEnum("api.StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterType((*StatusResponse)(nil), "api.StatusResponse")
	golang_proto.RegisterType((*StatusResponse)(nil), "api.StatusResponse")
}

func init() { proto.RegisterFile("controller.proto", fileDescriptor_ed7f10298fa1d90f) }
func init() { golang_proto.RegisterFile("controller.proto", fileDescriptor_ed7f10298fa1d90f) }

var fileDescriptor_ed7f10298fa1d90f = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x41, 0xab, 0x13, 0x31,
	0x10, 0xc7, 0x4d, 0x9f, 0xaf, 0x60, 0x0e, 0xeb, 0x12, 0xe1, 0x21, 0x55, 0xf6, 0x3d, 0x9e, 0x08,
	0x52, 0xdc, 0xc4, 0x56, 0xf4, 0xe2, 0x49, 0x4b, 0x41, 0x10, 0x29, 0x6c, 0x6f, 0x5e, 0x4a, 0x76,
	0x37, 0x4d, 0x43, 0x77, 0x77, 0x42, 0x92, 0x6d, 0xf1, 0xea, 0x47, 0xd0, 0x2f, 0xe4, 0xb1, 0x47,
	0xc1, 0x2f, 0x20, 0xad, 0x1f, 0x44, 0x9a, 0xdd, 0xda, 0x52, 0xde, 0x29, 0x33, 0xf3, 0xff, 0x4d,
	0x66, 0x32, 0x13, 0x1c, 0x66, 0x50, 0x39, 0x03, 0x45, 0x21, 0x0c, 0xd5, 0x06, 0x1c, 0x90, 0x0b,
	0xae, 0x55, 0xef, 0x89, 0x04, 0x90, 0x85, 0x60, 0x3e, 0x94, 0xd6, 0x73, 0x26, 0x4a, 0xed, 0xbe,
	0x36, 0x44, 0xef, 0xfa, 0x5c, 0x74, 0xaa, 0x14, 0xd6, 0xf1, 0x52, 0xb7, 0x40, 0x74, 0x0e, 0xe4,
	0xb5, 0xe1, 0x4e, 0x41, 0xd5, 0xea, 0x37, 0xe7, 0xfa, 0x5c, 0x89, 0x22, 0x9f, 0x95, 0xdc, 0x2e,
	0x5b, 0xe2, 0x69, 0x4b, 0x70, 0xad, 0x18, 0xaf, 0x2a, 0x70, 0x3e, 0xdd, 0xb6, 0xea, 0x4b, 0x7f,
	0x64, 0xb1, 0x14, 0x55, 0x6c, 0xd7, 0x5c, 0x4a, 0x61, 0x18, 0x68, 0x4f, 0xdc, 0x41, 0xc7, 0x52,
	0xb9, 0x45, 0x9d, 0xd2, 0x0c, 0x4a, 0x26, 0x41, 0xc2, 0xb1, 0xec, 0xde, 0xf3, 0x8e, 0xb7, 0x5a,
	0xfc, 0xed, 0x09, 0x5e, 0xae, 0x95, 0x5b, 0xc2, 0x9a, 0x49, 0x88, 0xbd, 0x18, 0xaf, 0x78, 0xa1,
	0x72, 0xee, 0xc0, 0x58, 0xf6, 0xdf, 0x6c, 0xf2, 0x6e, 0xdf, 0xe0, 0x60, 0xea, 0xb8, 0xab, 0x6d,
	0x22, 0xac, 0x86, 0xca, 0x0a, 0xf2, 0x0c, 0xdf, 0xcf, 0x20, 0x17, 0x8f, 0xd1, 0x0d, 0x7a, 0x11,
	0x0c, 0x1f, 0x52, 0xae, 0x15, 0x6d, 0x90, 0x11, 0xe4, 0x22, 0xf1, 0x62, 0xff, 0x1a, 0xe3, 0x63,
	0x8c, 0x74, 0x71, 0x67, 0xf2, 0x29, 0xbc, 0x47, 0x1e, 0xe0, 0xcb, 0x71, 0x92, 0x4c, 0x92, 0x10,
	0x0d, 0x67, 0x38, 0x18, 0x35, 0x3b, 0x9a, 0x0a, 0xb3, 0x52, 0x99, 0x20, 0x9f, 0x71, 0xb7, 0x49,
	0x21, 0x57, 0xb4, 0x99, 0x13, 0x3d, 0x3c, 0x89, 0x8e, 0xf7, 0x7b, 0xea, 0x3d, 0x3a, 0xa9, 0x75,
	0x68, 0xe7, 0xf6, 0xea, 0xdb, 0xef, 0xbf, 0x3f, 0x3a, 0x21, 0x09, 0xfc, 0x54, 0x57, 0x03, 0x66,
	0xbd, 0xfe, 0xe1, 0xe3, 0xf7, 0xf7, 0x98, 0x5c, 0x0e, 0x2f, 0x06, 0xf4, 0x55, 0x1f, 0x75, 0x36,
	0xdb, 0x08, 0xfd, 0xda, 0x46, 0xe8, 0xcf, 0x36, 0x42, 0x3f, 0x77, 0x11, 0xda, 0xec, 0x22, 0xf4,
	0xe5, 0xf9, 0xc9, 0x4c, 0xc0, 0x28, 0xbb, 0xa8, 0x59, 0x2e, 0x44, 0xba, 0xbf, 0xe8, 0xdd, 0xf1,
	0x03, 0xa5, 0x5d, 0xdf, 0xc6, 0xeb, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x37, 0xe4, 0xf8, 0x36,
	0x55, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ControlServiceClient is the client API for ControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControlServiceClient interface {
	Status(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*StatusResponse, error)
}

type controlServiceClient struct {
	cc *grpc.ClientConn
}

func NewControlServiceClient(cc *grpc.ClientConn) ControlServiceClient {
	return &controlServiceClient{cc}
}

func (c *controlServiceClient) Status(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ControlService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlServiceServer is the server API for ControlService service.
type ControlServiceServer interface {
	Status(context.Context, *types.Empty) (*StatusResponse, error)
}

// UnimplementedControlServiceServer can be embedded to have forward compatible implementations.
type UnimplementedControlServiceServer struct {
}

func (*UnimplementedControlServiceServer) Status(ctx context.Context, req *types.Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterControlServiceServer(s *grpc.Server, srv ControlServiceServer) {
	s.RegisterService(&_ControlService_serviceDesc, srv)
}

func _ControlService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ControlService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).Status(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControlService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ControlService",
	HandlerType: (*ControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _ControlService_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller.proto",
}

func (m *StatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintController(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintController(dAtA []byte, offset int, v uint64) int {
	offset -= sovController(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovController(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovController(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozController(x uint64) (n int) {
	return sovController(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= StatusCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipController(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowController
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowController
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowController
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthController
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupController
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthController
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthController        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowController          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupController = fmt.Errorf("proto: unexpected end of group")
)
