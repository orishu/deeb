// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: controller.proto

package controller

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	raftpb "github.com/coreos/etcd/raft/raftpb"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "github.com/mwitkow/go-proto-validators"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StatusCode int32

const (
	StatusCode_OK    StatusCode = 0
	StatusCode_ERROR StatusCode = 1
)

var StatusCode_name = map[int32]string{
	0: "OK",
	1: "ERROR",
}

var StatusCode_value = map[string]int32{
	"OK":    0,
	"ERROR": 1,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}

func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{0}
}

type StatusResponse struct {
	Code                 StatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=api.StatusCode" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{0}
}
func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(m, src)
}
func (m *StatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetCode() StatusCode {
	if m != nil {
		return m.Code
	}
	return StatusCode_OK
}

func (*StatusResponse) XXX_MessageName() string {
	return "api.StatusResponse"
}

type AddPeerRequest struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Addr                 string   `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Port                 string   `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPeerRequest) Reset()         { *m = AddPeerRequest{} }
func (m *AddPeerRequest) String() string { return proto.CompactTextString(m) }
func (*AddPeerRequest) ProtoMessage()    {}
func (*AddPeerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{1}
}
func (m *AddPeerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPeerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPeerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPeerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPeerRequest.Merge(m, src)
}
func (m *AddPeerRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddPeerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPeerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddPeerRequest proto.InternalMessageInfo

func (m *AddPeerRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AddPeerRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *AddPeerRequest) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (*AddPeerRequest) XXX_MessageName() string {
	return "api.AddPeerRequest"
}

type GetIDResponse struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIDResponse) Reset()         { *m = GetIDResponse{} }
func (m *GetIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetIDResponse) ProtoMessage()    {}
func (*GetIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{2}
}
func (m *GetIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIDResponse.Merge(m, src)
}
func (m *GetIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetIDResponse proto.InternalMessageInfo

func (m *GetIDResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (*GetIDResponse) XXX_MessageName() string {
	return "api.GetIDResponse"
}

type HighestIDResponse struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HighestIDResponse) Reset()         { *m = HighestIDResponse{} }
func (m *HighestIDResponse) String() string { return proto.CompactTextString(m) }
func (*HighestIDResponse) ProtoMessage()    {}
func (*HighestIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{3}
}
func (m *HighestIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HighestIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HighestIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HighestIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HighestIDResponse.Merge(m, src)
}
func (m *HighestIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *HighestIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HighestIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HighestIDResponse proto.InternalMessageInfo

func (m *HighestIDResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (*HighestIDResponse) XXX_MessageName() string {
	return "api.HighestIDResponse"
}

type WriteQuery struct {
	NodeID               uint64   `protobuf:"varint,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	QueryID              uint64   `protobuf:"varint,2,opt,name=queryID,proto3" json:"queryID,omitempty"`
	Sql                  string   `protobuf:"bytes,3,opt,name=sql,proto3" json:"sql,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteQuery) Reset()         { *m = WriteQuery{} }
func (m *WriteQuery) String() string { return proto.CompactTextString(m) }
func (*WriteQuery) ProtoMessage()    {}
func (*WriteQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{4}
}
func (m *WriteQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WriteQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WriteQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WriteQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteQuery.Merge(m, src)
}
func (m *WriteQuery) XXX_Size() int {
	return m.Size()
}
func (m *WriteQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteQuery.DiscardUnknown(m)
}

var xxx_messageInfo_WriteQuery proto.InternalMessageInfo

func (m *WriteQuery) GetNodeID() uint64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *WriteQuery) GetQueryID() uint64 {
	if m != nil {
		return m.QueryID
	}
	return 0
}

func (m *WriteQuery) GetSql() string {
	if m != nil {
		return m.Sql
	}
	return ""
}

func (*WriteQuery) XXX_MessageName() string {
	return "api.WriteQuery"
}

type Row struct {
	Cells                []*Row_Cell `protobuf:"bytes,1,rep,name=cells,proto3" json:"cells,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Row) Reset()         { *m = Row{} }
func (m *Row) String() string { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()    {}
func (*Row) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{5}
}
func (m *Row) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Row) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Row.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Row) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Row.Merge(m, src)
}
func (m *Row) XXX_Size() int {
	return m.Size()
}
func (m *Row) XXX_DiscardUnknown() {
	xxx_messageInfo_Row.DiscardUnknown(m)
}

var xxx_messageInfo_Row proto.InternalMessageInfo

func (m *Row) GetCells() []*Row_Cell {
	if m != nil {
		return m.Cells
	}
	return nil
}

func (*Row) XXX_MessageName() string {
	return "api.Row"
}

type Row_Cell struct {
	// Types that are valid to be assigned to Value:
	//	*Row_Cell_Str
	//	*Row_Cell_By
	//	*Row_Cell_I64
	//	*Row_Cell_I32
	//	*Row_Cell_F64
	//	*Row_Cell_B
	//	*Row_Cell_Ts
	Value                isRow_Cell_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Row_Cell) Reset()         { *m = Row_Cell{} }
func (m *Row_Cell) String() string { return proto.CompactTextString(m) }
func (*Row_Cell) ProtoMessage()    {}
func (*Row_Cell) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{5, 0}
}
func (m *Row_Cell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Row_Cell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Row_Cell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Row_Cell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Row_Cell.Merge(m, src)
}
func (m *Row_Cell) XXX_Size() int {
	return m.Size()
}
func (m *Row_Cell) XXX_DiscardUnknown() {
	xxx_messageInfo_Row_Cell.DiscardUnknown(m)
}

var xxx_messageInfo_Row_Cell proto.InternalMessageInfo

type isRow_Cell_Value interface {
	isRow_Cell_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Row_Cell_Str struct {
	Str string `protobuf:"bytes,1,opt,name=str,proto3,oneof" json:"str,omitempty"`
}
type Row_Cell_By struct {
	By []byte `protobuf:"bytes,2,opt,name=by,proto3,oneof" json:"by,omitempty"`
}
type Row_Cell_I64 struct {
	I64 int64 `protobuf:"varint,3,opt,name=i64,proto3,oneof" json:"i64,omitempty"`
}
type Row_Cell_I32 struct {
	I32 int32 `protobuf:"varint,4,opt,name=i32,proto3,oneof" json:"i32,omitempty"`
}
type Row_Cell_F64 struct {
	F64 float64 `protobuf:"fixed64,5,opt,name=f64,proto3,oneof" json:"f64,omitempty"`
}
type Row_Cell_B struct {
	B bool `protobuf:"varint,6,opt,name=b,proto3,oneof" json:"b,omitempty"`
}
type Row_Cell_Ts struct {
	Ts *types.Timestamp `protobuf:"bytes,7,opt,name=ts,proto3,oneof" json:"ts,omitempty"`
}

func (*Row_Cell_Str) isRow_Cell_Value() {}
func (*Row_Cell_By) isRow_Cell_Value()  {}
func (*Row_Cell_I64) isRow_Cell_Value() {}
func (*Row_Cell_I32) isRow_Cell_Value() {}
func (*Row_Cell_F64) isRow_Cell_Value() {}
func (*Row_Cell_B) isRow_Cell_Value()   {}
func (*Row_Cell_Ts) isRow_Cell_Value()  {}

func (m *Row_Cell) GetValue() isRow_Cell_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Row_Cell) GetStr() string {
	if x, ok := m.GetValue().(*Row_Cell_Str); ok {
		return x.Str
	}
	return ""
}

func (m *Row_Cell) GetBy() []byte {
	if x, ok := m.GetValue().(*Row_Cell_By); ok {
		return x.By
	}
	return nil
}

func (m *Row_Cell) GetI64() int64 {
	if x, ok := m.GetValue().(*Row_Cell_I64); ok {
		return x.I64
	}
	return 0
}

func (m *Row_Cell) GetI32() int32 {
	if x, ok := m.GetValue().(*Row_Cell_I32); ok {
		return x.I32
	}
	return 0
}

func (m *Row_Cell) GetF64() float64 {
	if x, ok := m.GetValue().(*Row_Cell_F64); ok {
		return x.F64
	}
	return 0
}

func (m *Row_Cell) GetB() bool {
	if x, ok := m.GetValue().(*Row_Cell_B); ok {
		return x.B
	}
	return false
}

func (m *Row_Cell) GetTs() *types.Timestamp {
	if x, ok := m.GetValue().(*Row_Cell_Ts); ok {
		return x.Ts
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Row_Cell) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Row_Cell_Str)(nil),
		(*Row_Cell_By)(nil),
		(*Row_Cell_I64)(nil),
		(*Row_Cell_I32)(nil),
		(*Row_Cell_F64)(nil),
		(*Row_Cell_B)(nil),
		(*Row_Cell_Ts)(nil),
	}
}

func (*Row_Cell) XXX_MessageName() string {
	return "api.Row.Cell"
}

type QuerySQLRequest struct {
	Sql                  string   `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuerySQLRequest) Reset()         { *m = QuerySQLRequest{} }
func (m *QuerySQLRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySQLRequest) ProtoMessage()    {}
func (*QuerySQLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{6}
}
func (m *QuerySQLRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySQLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySQLRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySQLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySQLRequest.Merge(m, src)
}
func (m *QuerySQLRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySQLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySQLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySQLRequest proto.InternalMessageInfo

func (m *QuerySQLRequest) GetSql() string {
	if m != nil {
		return m.Sql
	}
	return ""
}

func (*QuerySQLRequest) XXX_MessageName() string {
	return "api.QuerySQLRequest"
}

type QuerySQLResponse struct {
	Row                  *Row     `protobuf:"bytes,1,opt,name=row,proto3" json:"row,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuerySQLResponse) Reset()         { *m = QuerySQLResponse{} }
func (m *QuerySQLResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySQLResponse) ProtoMessage()    {}
func (*QuerySQLResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{7}
}
func (m *QuerySQLResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySQLResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySQLResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySQLResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySQLResponse.Merge(m, src)
}
func (m *QuerySQLResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySQLResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySQLResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySQLResponse proto.InternalMessageInfo

func (m *QuerySQLResponse) GetRow() *Row {
	if m != nil {
		return m.Row
	}
	return nil
}

func (*QuerySQLResponse) XXX_MessageName() string {
	return "api.QuerySQLResponse"
}

type ExecuteSQLRequest struct {
	Sql                  string   `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecuteSQLRequest) Reset()         { *m = ExecuteSQLRequest{} }
func (m *ExecuteSQLRequest) String() string { return proto.CompactTextString(m) }
func (*ExecuteSQLRequest) ProtoMessage()    {}
func (*ExecuteSQLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{8}
}
func (m *ExecuteSQLRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteSQLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteSQLRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteSQLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteSQLRequest.Merge(m, src)
}
func (m *ExecuteSQLRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteSQLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteSQLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteSQLRequest proto.InternalMessageInfo

func (m *ExecuteSQLRequest) GetSql() string {
	if m != nil {
		return m.Sql
	}
	return ""
}

func (*ExecuteSQLRequest) XXX_MessageName() string {
	return "api.ExecuteSQLRequest"
}
func init() {
	proto.RegisterEnum("api.StatusCode", StatusCode_name, StatusCode_value)
	golang_proto.RegisterEnum("api.StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterType((*StatusResponse)(nil), "api.StatusResponse")
	golang_proto.RegisterType((*StatusResponse)(nil), "api.StatusResponse")
	proto.RegisterType((*AddPeerRequest)(nil), "api.AddPeerRequest")
	golang_proto.RegisterType((*AddPeerRequest)(nil), "api.AddPeerRequest")
	proto.RegisterType((*GetIDResponse)(nil), "api.GetIDResponse")
	golang_proto.RegisterType((*GetIDResponse)(nil), "api.GetIDResponse")
	proto.RegisterType((*HighestIDResponse)(nil), "api.HighestIDResponse")
	golang_proto.RegisterType((*HighestIDResponse)(nil), "api.HighestIDResponse")
	proto.RegisterType((*WriteQuery)(nil), "api.WriteQuery")
	golang_proto.RegisterType((*WriteQuery)(nil), "api.WriteQuery")
	proto.RegisterType((*Row)(nil), "api.Row")
	golang_proto.RegisterType((*Row)(nil), "api.Row")
	proto.RegisterType((*Row_Cell)(nil), "api.Row.Cell")
	golang_proto.RegisterType((*Row_Cell)(nil), "api.Row.Cell")
	proto.RegisterType((*QuerySQLRequest)(nil), "api.QuerySQLRequest")
	golang_proto.RegisterType((*QuerySQLRequest)(nil), "api.QuerySQLRequest")
	proto.RegisterType((*QuerySQLResponse)(nil), "api.QuerySQLResponse")
	golang_proto.RegisterType((*QuerySQLResponse)(nil), "api.QuerySQLResponse")
	proto.RegisterType((*ExecuteSQLRequest)(nil), "api.ExecuteSQLRequest")
	golang_proto.RegisterType((*ExecuteSQLRequest)(nil), "api.ExecuteSQLRequest")
}

func init() { proto.RegisterFile("controller.proto", fileDescriptor_ed7f10298fa1d90f) }
func init() { golang_proto.RegisterFile("controller.proto", fileDescriptor_ed7f10298fa1d90f) }

var fileDescriptor_ed7f10298fa1d90f = []byte{
	// 879 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0xf6, 0x52, 0x7f, 0xf1, 0xb8, 0x96, 0xe5, 0x6d, 0x6a, 0xb3, 0x6a, 0x2b, 0x0b, 0x34, 0x02,
	0x08, 0x46, 0x44, 0x26, 0xb4, 0xab, 0x43, 0x7a, 0x4a, 0x6c, 0xa3, 0x32, 0x9a, 0x20, 0x0e, 0x5d,
	0xa0, 0x40, 0x5b, 0x20, 0xa0, 0xc4, 0x11, 0xbd, 0x08, 0xa5, 0xa5, 0x76, 0x97, 0x56, 0x7d, 0xed,
	0x23, 0xb4, 0x0f, 0xd2, 0x57, 0xe8, 0x31, 0xc7, 0x02, 0xbd, 0xf6, 0x50, 0xd8, 0x45, 0x9f, 0xa3,
	0xe0, 0x92, 0xb4, 0x6c, 0xb9, 0xca, 0x45, 0x9c, 0xfd, 0xe6, 0x9b, 0x6f, 0x86, 0xc3, 0x99, 0x15,
	0x34, 0x86, 0x7c, 0xa2, 0x04, 0x8f, 0x22, 0x14, 0x76, 0x2c, 0xb8, 0xe2, 0xb4, 0xe4, 0xc7, 0xac,
	0xf9, 0x59, 0xc8, 0x79, 0x18, 0xa1, 0xa3, 0xa1, 0x41, 0x32, 0x72, 0x70, 0x1c, 0xab, 0xcb, 0x8c,
	0xd1, 0xdc, 0x59, 0x74, 0x2a, 0x36, 0x46, 0xa9, 0xfc, 0x71, 0x9c, 0x13, 0x5a, 0x8b, 0x84, 0x20,
	0x11, 0xbe, 0x62, 0x7c, 0x92, 0xfb, 0xdb, 0x8b, 0xfe, 0x11, 0xc3, 0x28, 0x78, 0x3b, 0xf6, 0xe5,
	0xbb, 0x9c, 0xf1, 0x79, 0xce, 0xf0, 0x63, 0xe6, 0xf8, 0x93, 0x09, 0x57, 0x3a, 0x5c, 0xe6, 0xde,
	0xc7, 0xfa, 0x31, 0xec, 0x86, 0x38, 0xe9, 0xca, 0x99, 0x1f, 0x86, 0x28, 0x1c, 0x1e, 0x6b, 0xc6,
	0xff, 0xb0, 0x1f, 0x86, 0x3c, 0xe4, 0xda, 0x74, 0x52, 0x2b, 0x47, 0x7b, 0x21, 0x53, 0xe7, 0xc9,
	0xc0, 0x1e, 0xf2, 0xb1, 0x33, 0x9e, 0x31, 0xf5, 0x8e, 0xcf, 0x9c, 0x90, 0x77, 0xb5, 0xb3, 0x7b,
	0xe1, 0x47, 0x2c, 0xf0, 0x15, 0x17, 0xd2, 0xb9, 0x31, 0xf3, 0xb8, 0xee, 0xad, 0xb8, 0x21, 0x17,
	0xc8, 0xa5, 0x83, 0x6a, 0x18, 0x38, 0xc2, 0x1f, 0x29, 0xfd, 0x13, 0x0f, 0xf4, 0x23, 0xa3, 0x5b,
	0x5f, 0x42, 0xfd, 0x4c, 0xf9, 0x2a, 0x91, 0x1e, 0xca, 0x98, 0x4f, 0x24, 0xd2, 0x5d, 0x28, 0x0f,
	0x79, 0x80, 0x26, 0x69, 0x93, 0x4e, 0xdd, 0xdd, 0xb0, 0xfd, 0x98, 0xd9, 0x19, 0xe5, 0x90, 0x07,
	0xe8, 0x69, 0xa7, 0xd5, 0x87, 0xfa, 0xf3, 0x20, 0x38, 0x45, 0x14, 0x1e, 0x4e, 0x13, 0x94, 0x8a,
	0xd6, 0xc1, 0x60, 0x81, 0x0e, 0x2a, 0x7b, 0x06, 0x0b, 0x28, 0x85, 0xb2, 0x1f, 0x04, 0xc2, 0x34,
	0xda, 0xa4, 0xb3, 0xea, 0x69, 0x3b, 0xc5, 0x62, 0x2e, 0x94, 0x59, 0xca, 0xb0, 0xd4, 0xb6, 0x76,
	0x60, 0xfd, 0x6b, 0x54, 0x27, 0x47, 0x37, 0xf9, 0x17, 0x84, 0xac, 0x5d, 0xd8, 0xec, 0xb3, 0xf0,
	0x1c, 0xe5, 0x87, 0x48, 0xa7, 0x00, 0xdf, 0x09, 0xa6, 0xf0, 0x4d, 0x82, 0xe2, 0x92, 0x6e, 0x41,
	0x75, 0xc2, 0x03, 0x3c, 0x39, 0xca, 0x19, 0xf9, 0x89, 0x9a, 0x50, 0x9b, 0xa6, 0x84, 0x93, 0x23,
	0x5d, 0x56, 0xd9, 0x2b, 0x8e, 0xb4, 0x01, 0x25, 0x39, 0x8d, 0xf2, 0xc2, 0x52, 0xd3, 0xfa, 0x8b,
	0x40, 0xc9, 0xe3, 0x33, 0xba, 0x0b, 0x95, 0x21, 0x46, 0x91, 0x34, 0x49, 0xbb, 0xd4, 0x59, 0x73,
	0xd7, 0x75, 0x3f, 0x3c, 0x3e, 0xb3, 0x0f, 0x31, 0x8a, 0xbc, 0xcc, 0xd7, 0xfc, 0x8d, 0x40, 0x39,
	0x3d, 0x53, 0x0a, 0x25, 0xa9, 0x84, 0x4e, 0xbb, 0xda, 0x5f, 0xf1, 0xd2, 0x03, 0x6d, 0x80, 0x31,
	0xb8, 0xd4, 0x09, 0x3f, 0xea, 0xaf, 0x78, 0xc6, 0xe0, 0x32, 0x65, 0xb1, 0xde, 0x81, 0xce, 0x56,
	0x4a, 0x59, 0xac, 0x77, 0xa0, 0xb1, 0x7d, 0xd7, 0x2c, 0xb7, 0x49, 0xa7, 0xa2, 0xb1, 0x7d, 0x37,
	0xc5, 0x46, 0xbd, 0x03, 0xb3, 0xd2, 0x26, 0x1d, 0x92, 0x62, 0xa3, 0xde, 0x01, 0xad, 0x03, 0x19,
	0x98, 0xd5, 0x36, 0xe9, 0x3c, 0xe8, 0xaf, 0x78, 0x64, 0x40, 0x1f, 0x83, 0xa1, 0xa4, 0x59, 0x6b,
	0x93, 0xce, 0x9a, 0xdb, 0xb4, 0xb3, 0xb1, 0xb4, 0x8b, 0xc1, 0xb5, 0xbf, 0x2d, 0x26, 0x3f, 0xcd,
	0xac, 0xe4, 0x8b, 0x1a, 0x54, 0x2e, 0xfc, 0x28, 0x41, 0x6b, 0x17, 0x36, 0x74, 0xaf, 0xce, 0xde,
	0xbc, 0x2c, 0xbe, 0x60, 0xde, 0x03, 0x32, 0xef, 0x81, 0x0d, 0x8d, 0x39, 0x29, 0xef, 0x7c, 0x13,
	0x4a, 0x82, 0xcf, 0x34, 0x6b, 0xcd, 0x7d, 0x50, 0x74, 0xc3, 0x4b, 0x41, 0xeb, 0x11, 0x6c, 0x1e,
	0xff, 0x84, 0xc3, 0x44, 0xe1, 0x87, 0x64, 0xf7, 0x76, 0x00, 0xe6, 0x03, 0x45, 0xab, 0x60, 0xbc,
	0xfe, 0xa6, 0xb1, 0x42, 0x57, 0xa1, 0x72, 0xec, 0x79, 0xaf, 0xbd, 0x06, 0x71, 0xaf, 0x0d, 0xa8,
	0x1f, 0x66, 0x7b, 0x7f, 0x86, 0xe2, 0x82, 0x0d, 0x91, 0xbe, 0x82, 0x6a, 0x16, 0x43, 0xb7, 0xee,
	0xbd, 0xe4, 0x71, 0xba, 0xfb, 0xcd, 0x8f, 0x6f, 0x4d, 0x6a, 0x51, 0xad, 0xb5, 0xf5, 0xf3, 0x9f,
	0xff, 0xfc, 0x6a, 0x34, 0x68, 0x5d, 0x6f, 0xea, 0xc5, 0x53, 0x47, 0x66, 0x22, 0xa7, 0x50, 0xcb,
	0xe7, 0x97, 0x66, 0x71, 0x77, 0xa7, 0xb9, 0xb9, 0x24, 0x89, 0x65, 0x6a, 0x3d, 0x6a, 0xad, 0x17,
	0x7a, 0x31, 0xa2, 0x90, 0xcf, 0xc8, 0x1e, 0x3d, 0x83, 0x07, 0x45, 0xaf, 0xe8, 0x43, 0x2d, 0xb9,
	0xd0, 0xdf, 0xe6, 0x27, 0x0b, 0x68, 0x5e, 0x62, 0x2e, 0x49, 0x1b, 0x85, 0xa4, 0x9e, 0x49, 0x39,
	0x8d, 0x9e, 0x10, 0xfa, 0x03, 0xc0, 0xbc, 0xa1, 0x74, 0x4b, 0x0b, 0xdc, 0xeb, 0xf0, 0xd2, 0x62,
	0xbf, 0xd0, 0xca, 0xdb, 0x16, 0x2d, 0x94, 0x31, 0x0b, 0x95, 0xd3, 0xe8, 0x19, 0xd9, 0x73, 0xff,
	0x25, 0x50, 0xf6, 0xfc, 0x91, 0xa2, 0x2e, 0xd4, 0x5e, 0xa1, 0x94, 0x7e, 0x88, 0x74, 0xc3, 0xce,
	0xae, 0x08, 0x3b, 0x07, 0x96, 0x69, 0xd3, 0x97, 0x50, 0xd1, 0x6b, 0xbb, 0xf4, 0x73, 0x50, 0x5d,
	0xec, 0x9d, 0xd5, 0xb6, 0xb6, 0x75, 0x41, 0x9b, 0x74, 0xa3, 0x28, 0x48, 0x5f, 0x4a, 0x2c, 0xa0,
	0x3f, 0xc2, 0xea, 0xcd, 0x8e, 0x2f, 0x55, 0xcc, 0x5e, 0xff, 0xde, 0x5d, 0x60, 0xed, 0x68, 0xd5,
	0x4f, 0xe9, 0xf6, 0x1d, 0xd5, 0xf3, 0x8c, 0xf7, 0x96, 0x05, 0x2f, 0xfa, 0xbf, 0x3c, 0x07, 0x5a,
	0x71, 0x4b, 0x4f, 0xed, 0x27, 0x7b, 0xc4, 0x78, 0x7f, 0xd5, 0x22, 0x7f, 0x5c, 0xb5, 0xc8, 0xdf,
	0x57, 0x2d, 0xf2, 0xfb, 0x75, 0x8b, 0xbc, 0xbf, 0x6e, 0x91, 0xef, 0x1f, 0xdd, 0xba, 0x35, 0xb9,
	0x60, 0xf2, 0x3c, 0x71, 0x02, 0xc4, 0x41, 0xaa, 0xf8, 0xd5, 0xfc, 0x1f, 0x68, 0x50, 0xd5, 0x25,
	0xed, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x60, 0xcf, 0x17, 0x96, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ControlServiceClient is the client API for ControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControlServiceClient interface {
	Status(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	AddPeer(ctx context.Context, in *AddPeerRequest, opts ...grpc.CallOption) (*types.Empty, error)
	QuerySQL(ctx context.Context, in *QuerySQLRequest, opts ...grpc.CallOption) (ControlService_QuerySQLClient, error)
	ExecuteSQL(ctx context.Context, in *ExecuteSQLRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type controlServiceClient struct {
	cc *grpc.ClientConn
}

func NewControlServiceClient(cc *grpc.ClientConn) ControlServiceClient {
	return &controlServiceClient{cc}
}

func (c *controlServiceClient) Status(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ControlService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) AddPeer(ctx context.Context, in *AddPeerRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/api.ControlService/AddPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) QuerySQL(ctx context.Context, in *QuerySQLRequest, opts ...grpc.CallOption) (ControlService_QuerySQLClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ControlService_serviceDesc.Streams[0], "/api.ControlService/QuerySQL", opts...)
	if err != nil {
		return nil, err
	}
	x := &controlServiceQuerySQLClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ControlService_QuerySQLClient interface {
	Recv() (*QuerySQLResponse, error)
	grpc.ClientStream
}

type controlServiceQuerySQLClient struct {
	grpc.ClientStream
}

func (x *controlServiceQuerySQLClient) Recv() (*QuerySQLResponse, error) {
	m := new(QuerySQLResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controlServiceClient) ExecuteSQL(ctx context.Context, in *ExecuteSQLRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/api.ControlService/ExecuteSQL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlServiceServer is the server API for ControlService service.
type ControlServiceServer interface {
	Status(context.Context, *types.Empty) (*StatusResponse, error)
	AddPeer(context.Context, *AddPeerRequest) (*types.Empty, error)
	QuerySQL(*QuerySQLRequest, ControlService_QuerySQLServer) error
	ExecuteSQL(context.Context, *ExecuteSQLRequest) (*types.Empty, error)
}

// UnimplementedControlServiceServer can be embedded to have forward compatible implementations.
type UnimplementedControlServiceServer struct {
}

func (*UnimplementedControlServiceServer) Status(ctx context.Context, req *types.Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedControlServiceServer) AddPeer(ctx context.Context, req *AddPeerRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPeer not implemented")
}
func (*UnimplementedControlServiceServer) QuerySQL(req *QuerySQLRequest, srv ControlService_QuerySQLServer) error {
	return status.Errorf(codes.Unimplemented, "method QuerySQL not implemented")
}
func (*UnimplementedControlServiceServer) ExecuteSQL(ctx context.Context, req *ExecuteSQLRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteSQL not implemented")
}

func RegisterControlServiceServer(s *grpc.Server, srv ControlServiceServer) {
	s.RegisterService(&_ControlService_serviceDesc, srv)
}

func _ControlService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ControlService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).Status(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_AddPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).AddPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ControlService/AddPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).AddPeer(ctx, req.(*AddPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_QuerySQL_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QuerySQLRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlServiceServer).QuerySQL(m, &controlServiceQuerySQLServer{stream})
}

type ControlService_QuerySQLServer interface {
	Send(*QuerySQLResponse) error
	grpc.ServerStream
}

type controlServiceQuerySQLServer struct {
	grpc.ServerStream
}

func (x *controlServiceQuerySQLServer) Send(m *QuerySQLResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ControlService_ExecuteSQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteSQLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).ExecuteSQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ControlService/ExecuteSQL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).ExecuteSQL(ctx, req.(*ExecuteSQLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControlService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ControlService",
	HandlerType: (*ControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _ControlService_Status_Handler,
		},
		{
			MethodName: "AddPeer",
			Handler:    _ControlService_AddPeer_Handler,
		},
		{
			MethodName: "ExecuteSQL",
			Handler:    _ControlService_ExecuteSQL_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QuerySQL",
			Handler:       _ControlService_QuerySQL_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "controller.proto",
}

// RaftClient is the client API for Raft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftClient interface {
	Message(ctx context.Context, in *raftpb.Message, opts ...grpc.CallOption) (*types.Empty, error)
	GetID(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*GetIDResponse, error)
	HighestID(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*HighestIDResponse, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) Message(ctx context.Context, in *raftpb.Message, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/api.Raft/Message", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) GetID(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*GetIDResponse, error) {
	out := new(GetIDResponse)
	err := c.cc.Invoke(ctx, "/api.Raft/GetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) HighestID(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*HighestIDResponse, error) {
	out := new(HighestIDResponse)
	err := c.cc.Invoke(ctx, "/api.Raft/HighestID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftServer is the server API for Raft service.
type RaftServer interface {
	Message(context.Context, *raftpb.Message) (*types.Empty, error)
	GetID(context.Context, *types.Empty) (*GetIDResponse, error)
	HighestID(context.Context, *types.Empty) (*HighestIDResponse, error)
}

// UnimplementedRaftServer can be embedded to have forward compatible implementations.
type UnimplementedRaftServer struct {
}

func (*UnimplementedRaftServer) Message(ctx context.Context, req *raftpb.Message) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Message not implemented")
}
func (*UnimplementedRaftServer) GetID(ctx context.Context, req *types.Empty) (*GetIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetID not implemented")
}
func (*UnimplementedRaftServer) HighestID(ctx context.Context, req *types.Empty) (*HighestIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HighestID not implemented")
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_Message_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(raftpb.Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).Message(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Raft/Message",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).Message(ctx, req.(*raftpb.Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_GetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).GetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Raft/GetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).GetID(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_HighestID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).HighestID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Raft/HighestID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).HighestID(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Message",
			Handler:    _Raft_Message_Handler,
		},
		{
			MethodName: "GetID",
			Handler:    _Raft_GetID_Handler,
		},
		{
			MethodName: "HighestID",
			Handler:    _Raft_HighestID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller.proto",
}

func (m *StatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintController(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddPeerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPeerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPeerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintController(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintController(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintController(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintController(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HighestIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HighestIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HighestIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintController(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WriteQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WriteQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WriteQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sql) > 0 {
		i -= len(m.Sql)
		copy(dAtA[i:], m.Sql)
		i = encodeVarintController(dAtA, i, uint64(len(m.Sql)))
		i--
		dAtA[i] = 0x1a
	}
	if m.QueryID != 0 {
		i = encodeVarintController(dAtA, i, uint64(m.QueryID))
		i--
		dAtA[i] = 0x10
	}
	if m.NodeID != 0 {
		i = encodeVarintController(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Row) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Row) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Row) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cells) > 0 {
		for iNdEx := len(m.Cells) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cells[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintController(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Row_Cell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Row_Cell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Row_Cell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Row_Cell_Str) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Row_Cell_Str) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Str)
	copy(dAtA[i:], m.Str)
	i = encodeVarintController(dAtA, i, uint64(len(m.Str)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *Row_Cell_By) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Row_Cell_By) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.By != nil {
		i -= len(m.By)
		copy(dAtA[i:], m.By)
		i = encodeVarintController(dAtA, i, uint64(len(m.By)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Row_Cell_I64) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Row_Cell_I64) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintController(dAtA, i, uint64(m.I64))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *Row_Cell_I32) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Row_Cell_I32) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintController(dAtA, i, uint64(m.I32))
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *Row_Cell_F64) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Row_Cell_F64) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.F64))))
	i--
	dAtA[i] = 0x29
	return len(dAtA) - i, nil
}
func (m *Row_Cell_B) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Row_Cell_B) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.B {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *Row_Cell_Ts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Row_Cell_Ts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ts != nil {
		{
			size, err := m.Ts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintController(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *QuerySQLRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySQLRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySQLRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sql) > 0 {
		i -= len(m.Sql)
		copy(dAtA[i:], m.Sql)
		i = encodeVarintController(dAtA, i, uint64(len(m.Sql)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySQLResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySQLResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySQLResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Row != nil {
		{
			size, err := m.Row.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintController(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecuteSQLRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteSQLRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecuteSQLRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sql) > 0 {
		i -= len(m.Sql)
		copy(dAtA[i:], m.Sql)
		i = encodeVarintController(dAtA, i, uint64(len(m.Sql)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintController(dAtA []byte, offset int, v uint64) int {
	offset -= sovController(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovController(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddPeerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovController(uint64(m.Id))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovController(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovController(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovController(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HighestIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovController(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WriteQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovController(uint64(m.NodeID))
	}
	if m.QueryID != 0 {
		n += 1 + sovController(uint64(m.QueryID))
	}
	l = len(m.Sql)
	if l > 0 {
		n += 1 + l + sovController(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Row) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for _, e := range m.Cells {
			l = e.Size()
			n += 1 + l + sovController(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Row_Cell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Row_Cell_Str) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Str)
	n += 1 + l + sovController(uint64(l))
	return n
}
func (m *Row_Cell_By) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.By != nil {
		l = len(m.By)
		n += 1 + l + sovController(uint64(l))
	}
	return n
}
func (m *Row_Cell_I64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovController(uint64(m.I64))
	return n
}
func (m *Row_Cell_I32) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovController(uint64(m.I32))
	return n
}
func (m *Row_Cell_F64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	return n
}
func (m *Row_Cell_B) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *Row_Cell_Ts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ts != nil {
		l = m.Ts.Size()
		n += 1 + l + sovController(uint64(l))
	}
	return n
}
func (m *QuerySQLRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sql)
	if l > 0 {
		n += 1 + l + sovController(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QuerySQLResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Row != nil {
		l = m.Row.Size()
		n += 1 + l + sovController(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExecuteSQLRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sql)
	if l > 0 {
		n += 1 + l + sovController(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovController(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozController(x uint64) (n int) {
	return sovController(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= StatusCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPeerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPeerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPeerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HighestIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HighestIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HighestIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriteQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriteQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriteQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryID", wireType)
			}
			m.QueryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sql", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sql = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Row) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Row: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Row: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cells", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cells = append(m.Cells, &Row_Cell{})
			if err := m.Cells[len(m.Cells)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Row_Cell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &Row_Cell_Str{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field By", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Value = &Row_Cell_By{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I64", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &Row_Cell_I64{v}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I32", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &Row_Cell_I32{v}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field F64", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = &Row_Cell_F64{float64(math.Float64frombits(v))}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &Row_Cell_B{b}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Timestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Row_Cell_Ts{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySQLRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySQLRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySQLRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sql", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sql = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySQLResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySQLResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySQLResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Row == nil {
				m.Row = &Row{}
			}
			if err := m.Row.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteSQLRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteSQLRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteSQLRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sql", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sql = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipController(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowController
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowController
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowController
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthController
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupController
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthController
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthController        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowController          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupController = fmt.Errorf("proto: unexpected end of group")
)
