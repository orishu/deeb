// Code generated by MockGen. DO NOT EDIT.
// Source: internal/transport/client.go

// Package transport is a generated GoMock package.
package transport

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/orishu/deeb/api"
	raftpb "go.etcd.io/etcd/raft/v3/raftpb"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddNewPeer mocks base method.
func (m *MockClient) AddNewPeer(ctx context.Context, nodeID uint64, addr, port string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewPeer", ctx, nodeID, addr, port)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewPeer indicates an expected call of AddNewPeer.
func (mr *MockClientMockRecorder) AddNewPeer(ctx, nodeID, addr, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewPeer", reflect.TypeOf((*MockClient)(nil).AddNewPeer), ctx, nodeID, addr, port)
}

// CheckHealth mocks base method.
func (m *MockClient) CheckHealth(ctx context.Context, lagThreshold uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHealth", ctx, lagThreshold)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckHealth indicates an expected call of CheckHealth.
func (mr *MockClientMockRecorder) CheckHealth(ctx, lagThreshold interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHealth", reflect.TypeOf((*MockClient)(nil).CheckHealth), ctx, lagThreshold)
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// GetHighestID mocks base method.
func (m *MockClient) GetHighestID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHighestID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHighestID indicates an expected call of GetHighestID.
func (mr *MockClientMockRecorder) GetHighestID(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHighestID", reflect.TypeOf((*MockClient)(nil).GetHighestID), ctx)
}

// GetRemoteID mocks base method.
func (m *MockClient) GetRemoteID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteID indicates an expected call of GetRemoteID.
func (mr *MockClientMockRecorder) GetRemoteID(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteID", reflect.TypeOf((*MockClient)(nil).GetRemoteID), ctx)
}

// Progress mocks base method.
func (m *MockClient) Progress(ctx context.Context) (*controller.ProgressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Progress", ctx)
	ret0, _ := ret[0].(*controller.ProgressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Progress indicates an expected call of Progress.
func (mr *MockClientMockRecorder) Progress(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Progress", reflect.TypeOf((*MockClient)(nil).Progress), ctx)
}

// SendRaftMessage mocks base method.
func (m *MockClient) SendRaftMessage(ctx context.Context, msg *raftpb.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRaftMessage", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendRaftMessage indicates an expected call of SendRaftMessage.
func (mr *MockClientMockRecorder) SendRaftMessage(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRaftMessage", reflect.TypeOf((*MockClient)(nil).SendRaftMessage), ctx, msg)
}
