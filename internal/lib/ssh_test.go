package lib

import (
	"encoding/base64"
	"io"
	"os/exec"
	"strconv"
	"strings"
	"testing"
	"time"

	"github.com/phayes/freeport"
	"github.com/stretchr/testify/require"
)

var hostKey = `LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUF3dlI4amZ3VnpDM00rb01iZ0VZSkFTRGRseHRWWDZSMDZtU2doc2dVTDB2cllYclNIM3NYCkpBZzJNWHhTT0ZNcE9EMkp5SUNkQWpDeFJ3R3huQjU5dHRaVTQxZ2g4b3MrbWZLU3RZWXBzbWUwV1Jia3pPY1ZNVWVObkYKbkVwUHJzWXlqNERFN2h4VjJ0YXNwZTNYZlZuMW9ZeFUycmNIa1EvL0tScEw2ZDZHTHYvM2s5UkdpaGtycmEzMTQ1Q1BTYQpiM29Dditrd1JRdmxzMWRGYXR2UjNKZzZSL3UwL2hKUnpyR3Q1RWtDNHh6QndLYnEzdnB3cnhrNE1VK1NhUkkyaDFtNEhoClNHVmJFT0tVQ3ExSHVsT2JtR1BmMm1CSlpmekUrbE5nRXV1WDJYUmVlNnljc25Vb3NYUGVXOVVXMDVkL210UWZURytoVmwKL3RhUTBKbnNQY0dLdEY4TVhpS2FuSHVEeTUySjlYZmFVLy9kN2NsbjRoTVZ5L1k2RmFRQk9xcE0zVEsxSWUwU1FneVdZcQpYOENlaExnRlpuc2hNMkd5cHk0SExDN0NueUFuZHZERGNrVTBoOFFtUHo3b3Y5T0NXZWVCYUJEVVc5R2s4V0s2bVRDM3VBCk5yeE1jQlpVaFNuckR4V21SbXhidUtabm9nL0swQjBwNVg3Y0llQnpBQUFGaUJGdnk4TVJiOHZEQUFBQUIzTnphQzF5YzIKRUFBQUdCQU1MMGZJMzhGY3d0elBxREc0QkdDUUVnM1pjYlZWK2tkT3Brb0liSUZDOUw2MkY2MGg5N0Z5UUlOakY4VWpoVApLVGc5aWNpQW5RSXdzVWNCc1p3ZWZiYldWT05ZSWZLTFBwbnlrcldHS2JKbnRGa1c1TXpuRlRGSGpaeFp4S1Q2N0dNbytBCnhPNGNWZHJXcktYdDEzMVo5YUdNVk5xM0I1RVAveWthUytuZWhpNy85NVBVUm9vWks2MnQ5ZU9RajBtbTk2QXIvcE1FVUwKNWJOWFJXcmIwZHlZT2tmN3RQNFNVYzZ4cmVSSkF1TWN3Y0NtNnQ3NmNLOFpPREZQa21rU05vZFp1QjRVaGxXeERpbEFxdApSN3BUbTVoajM5cGdTV1g4eFBwVFlCTHJsOWwwWG51c25MSjFLTEZ6M2x2VkZ0T1hmNXJVSDB4dm9WWmY3V2tOQ1o3RDNCCmlyUmZERjRpbXB4N2c4dWRpZlYzMmxQLzNlM0paK0lURmN2Mk9oV2tBVHFxVE4weXRTSHRFa0lNbG1LbC9Bbm9TNEJXWjcKSVROaHNxY3VCeXd1d3A4Z0ozYnd3M0pGTklmRUpqOCs2TC9UZ2xubmdXZ1ExRnZScFBGaXVwa3d0N2dEYThUSEFXVklVcAo2dzhWcGtac1c3aW1aNklQeXRBZEtlViszQ0hnY3dBQUFBTUJBQUVBQUFHQkFLenUzb1c4TlVHMjV2cll6YzVOVWJOMGlkCnQrWFk3SGZRWm1XSmIyYUNGRVFQbHBUM2FwWTIrTThUV1lSLzY2bGZmVGJxTXlveFBNU1pUcEJibXN1bXN6V0gyS01pTEsKTGErMW96bnVWcEp3dDJQSGtSSEpjZDBTMGFUOVpCZk1sVitvZWMvQk1UZzN6cHJLQkxpRGtqVVdZSjYwTlAxQ0J6aGkzWgpxN2s2c09DRUlnTTU2NUNZbjB3aTRka0k1SEc2OERGZWxTV29VRTlxN05IVUNhMlYvS2tQaEZhTmx2T3E0VW9tRzcraG1uCjZwNlA4Z3YxTDN2QzdUdWdrQWt3SXkwK3piNG1NcTd6RUlWN0pSdWFNeTVDNnhaMUM4NklHeDRwM3dIRkVFeEtzczhwUVAKL1UvUTFiNHp3SFA5dk0wbDMyRDZqc1Z3ZnVuTlpneVQvK2IzRkxiWE5pM0dqckIxcnZiajdQVU10ZzR3Y2NRZUY2NVpacwpyNUxjWmpILzdDNEZwQ3lIY0RxejhzNGE5Y3V2WkpHd3BOaElYRmFaeEU3VlZGR2o0WFVnWmpyVUZxbUR6QmZoVk5YUHRqClFVY0xvaDVDZUpQN3FRekxtZnNaZ0d4UXlrbXJLOGNjaklPVlVVUW1EL1Jpd0RWcHBPTERHQkRCVmgwQUI5OG5yaEFRQUEKQU1CdVNpMDFadnFzcm44Y2VnZHRIT3pWYnF4RVJsY08rYU9YdkZ3V010K1dWYXhxUndsU2pYbWY2RFhmcUFXS2p3OVBKZQpMU0ZUeU9qSVNrR0FDNFJONXhOYkQrNnNKYngwTmVuVTE2ekEwRHp4UGk1ckR2aFZBQ09MMXlEa0lTSXRuUkRKUi9ySEpQCkY0dFJKdkpjTXpyWmpDMjFIaU5Ub0pxNms3TG5ja0E1VForWWNLUUFkSktqT3VTbnNRbGdPd1lvUHZ4Rmd6NW41eEVIT3oKWUFiVkU0UVZURmlkWFVDT2NZVnAwMW1IeXpkZ3lteWM3SEZXbjRZb3o2RlNkRHNSRUFBQURCQU8rditRZ2RJV2Fwck0wYQpsQldKU1NjWkRORTZ0eDFRQ1BuaUtKUFJUSW1qWnBwNUlNemYvY2dMYzRscHNNVFl6ZkNzLzcyc2I5ZnA5UnZwNVBQLzFCCjl4MFIzUHdSWEJSWG9vMFplRk9QY29UdXo1OHcwSTZoUmFLL3JTZVpDT1MxMXJjV0pHVmZabjlOc3UvLzVleHhHVTQzSHEKZWtzWG50YzdKb1hkcm9NanVqNkYyRW5iUWdMV1ovejVGaVdPRk55ZkRRdHJ3N0RYd1p4MDVjSmFQQzg3MENyemhlOE5tUgo2aldST1ZvbFNGYXJwcHBDc0M2ejBKM3Q2S2ZzYndNd0FBQU1FQTBEa21mTVlHcWk4S3FMcXNWV0xlWWZRRnpDQXFYT25XCm1LRld0ZzVOSGxKT3BDeXlQUUpKUTE0QWhCenk3dDJVdmpGeWpvYUFocnQ0bldTY0pXdnJtNWx3TVo1ZE9WdUhBbmE2NmEKeitQTTdyL2M1aUxGTEs1WGNtVXgzenhIWVBrUEwvN3IxL0RUUm1EN0ZMMm13SnBIZDh4RklzR01ZblF0WGdJRkFSOTFtUwpod09LVVBzM3J5bEVQM3FkRm91b0ZxMC9pWXhyYTFqRTFQK0NRaDI1TDl0LzJ4RUFVN1FHQkx0Yys5WVZXZVp2eUovUS9FCjZoUjI0eC91TW83QTdCQUFBQURtOXlhVUJLWlc1dWVYTXRUVUpRQVFJREJBPT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==`

func Test_mock_sshd_basic(t *testing.T) {
	port, err := freeport.GetFreePort()
	require.NoError(t, err)

	decodedHostKey, err := base64.StdEncoding.DecodeString(hostKey)
	srv := NewSSHRespondingServer(
		port, decodedHostKey, "some-command", strings.NewReader("some data"), NewDevelopmentLogger())

	srv.StartAsync()
	time.Sleep(time.Second)

	portStr := strconv.Itoa(port)
	cmd := exec.Command("ssh", "-o", "StrictHostKeyChecking=no", "-p", portStr, "localhost")
	stdin, err := cmd.StdinPipe()
	require.NoError(t, err)

	go func() {
		io.WriteString(stdin, "some-command")
		stdin.Close()
	}()

	output, _ := cmd.Output()
	require.Equal(t, "some data", string(output))

	srv.Stop()
}
